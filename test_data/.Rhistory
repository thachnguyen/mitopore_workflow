help(DGEList)
library(limma)
library(edgeR)
help(DGEList)
library(AnnotationHub)
w
setwd("/home/ag-rossi/projects/mitopore_workflow/test_data")
ref_dir<-"/home/ag-rossi/projects/mitopore_workflow/mitopore_local"
# Loading required packages
suppressMessages(library(ShortRead))
library(tidyverse)
suppressMessages(library(yaml))
suppressMessages(library(gridExtra))
resultDir <- file.path("Analysis", "Results")
dir.create(resultDir, showWarnings = FALSE, recursive = TRUE)
resultDir1 <- file.path("Analysis", "QC")
dir.create(resultDir1, showWarnings = FALSE, recursive = TRUE)
# Loading the config file----
config <- yaml::yaml.load_file("config.yaml")
# Create a study design by using the config.yaml-file
studyDesign <- data.frame()
for (i in 1:length(config$Samples)) {
studyDesign <- rbind(studyDesign,
data.frame(filename=unlist(config$Samples[i])))
}
coverage_filter <- function(df) {
df %>%
mutate(coverage_filter = case_when(
VariantLevel < 0.02 ~ "cov_out2pct",
VariantLevel <= 0.05 & VariantLevel >=0.02 & Coverage < 33275 ~ "cov_out33275",
VariantLevel <= 0.2 & VariantLevel >=0.05 & Coverage < 6386 ~ "cov_out6386",
VariantLevel <= 0.35 & VariantLevel >0.2 & Coverage < 1344 ~ "cov_out1344",
VariantLevel <= 0.5 & VariantLevel >0.35 & Coverage < 624 ~ "cov_out624",
VariantLevel <= 0.65 & VariantLevel >0.5 & Coverage < 336 ~ "cov_out336",
VariantLevel <= 0.8 & VariantLevel >0.65 & Coverage < 181 ~ "cov_out181",
VariantLevel <= 1 & VariantLevel >0.8 & Coverage < 84 ~ "cov_out84",
TRUE ~ "in"))
}
rCRS <- read_file(paste0(ref_dir,"/reference/rCRS.fasta")) %>%
unlist() %>%
str_remove("chrM") %>%
str_remove(">") %>%
str_remove_all("\n") %>%
str_remove_all("\r")
mitopore_blacklist <- str_locate_all(rCRS,
"CCCCCC|AAAAAA|TTTTTT|GGGGGG") %>%
as.data.frame() %>%
rowwise() %>%
mutate(mitopore_blacklist = list(start:end)) %>%
unnest(mitopore_blacklist) %>%
pull(mitopore_blacklist) %>%
c(3107)
vcf_file <- read_delim("Analysis/Results/result1.txt") %>%
coverage_filter() %>%
dplyr::filter(!Pos %in% mitopore_blacklist, !Filter == "STRAND_BIAS") %>%
dplyr::filter(coverage_filter == "in")
disease_df <- readxl::read_xlsx(paste0(ref_dir,"/static/Lists MITOMAP/MutationsCodingControl.xlsx"), skip = 1) %>%
dplyr::select(Position, `Plasmy Reports(Homo/Hetero)`, NucleotideChange, Disease) %>%
separate(NucleotideChange, into = c("REF", "ALT"), sep = "-") %>%
separate(`Plasmy Reports(Homo/Hetero)`, into = c("Homoplasmy", "Heteroplasmy"), sep = "/") %>%
mutate(POS = Position, DiseaseStatus = Disease) %>%
dplyr::select(-Position, -Disease)
rtRNA_df <- readxl::read_xlsx(paste0(ref_dir,"/static/Lists MITOMAP/MutationsRNA MITOMAP Foswiki.xlsx"), skip = 1) %>%
dplyr::select(Position, Allele, Disease, Status, Homoplasmy, Heteroplasmy) %>%
separate(Allele, into = c("REF", "ALT"), sep = "\\d+") %>%
mutate(POS = Position, DiseaseStatus_tr = Disease) %>%
dplyr::select(-Position, -Disease)
poly_df <- readxl::read_xlsx(paste0(ref_dir,"/static/Lists MITOMAP/Polymorphisms MITOMAP Foswiki.xlsx")) %>%
dplyr::select(pos, ref, alt, aachange) %>%
mutate(POS = pos, REF = ref, ALT = alt, `Status` = "polymorphism") %>%
dplyr::select(-pos, -ref, -alt)
orgdb <- EnsDb.Hsapiens.v86::EnsDb.Hsapiens.v86
check <- ensembldb::genes(orgdb, ensembldb::listColumns(orgdb, "is_circular"))
mt_pos <- as_tibble(check) %>% dplyr::filter(seqnames == "MT")
mt_genome <- ensembldb::genes(orgdb, filter = AnnotationFilter::SeqNameFilter("MT")) %>% as_tibble()
mt_anno <- mt_genome %>%
rowwise() %>%
mutate(POS = list(start:end)) %>%
unnest(POS) %>%
dplyr::select(POS, gene_name, gene_biotype)
rect_positions <- mt_genome %>% distinct(gene_name, start, end, gene_biotype) %>% mutate(gene_biotype = case_when(is.na(gene_biotype) ~ "unknown",
str_detect(gene_biotype, "tRNA") ~ "tRNA",
str_detect(gene_biotype, "rRNA") ~ "rRNA",
TRUE ~ gene_biotype),
start = as.double(start),
end = as.double(end))
vcf_file <- vcf_file  %>%
full_join(mt_anno, by=c("Pos"="POS")) %>%
full_join(poly_df, by=c("Pos"="POS", "Ref"="REF", "Variant"="ALT")) %>%
full_join(rtRNA_df, by=c("Pos"="POS", "Ref"="REF", "Variant"="ALT")) %>%
full_join(disease_df, by=c("Pos"="POS", "Ref"="REF", "Variant"="ALT")) %>%
mutate(Status = case_when(is.na(Status.x) ~ "no polymorphism", TRUE ~ Status.x)) %>%
mutate(trans = factor(str_c(Ref, ">", Variant)))
writexl::write_xlsx(vcf_file %>% dplyr::filter(!is.na(ID)), "Analysis/Results/disease_table.xlsx")
vcf_file %>%
dplyr::filter(!is.na(ID)) %>%
ggplot(data = ., mapping = aes(Pos, VariantLevel)) +
geom_point(aes(color = Status), size = 6, alpha = 0.5) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_rect(fill=alpha("orange", 0.5)),
axis.title.y = element_text(size = 28),
axis.title.x = element_text(size = 28),
axis.text = element_text(size = 26, face = "bold"),
panel.spacing = unit(1, "lines"),
strip.text = element_text(size = 12, face = "bold"),
plot.title = element_text(hjust = 0.5, size = 45, face = "bold"),
legend.position = "bottom",
legend.text = element_text(size = 16)) +
geom_hline(yintercept = 0.01, linetype = "dashed", color = "red") +
geom_hline(yintercept = 0.02, linetype = "dashed", color = "red") +
geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
geom_hline(yintercept = 0.1, linetype = "dashed", color = "red") +
geom_rect(data = filter(rect_positions, gene_biotype == "protein_coding"),
aes(xmin = start, xmax = end, ymin = -.2, ymax = -.10),
fill = "cornflowerblue", color = "black", inherit.aes = F) +
geom_text(data = filter(rect_positions, gene_biotype == "protein_coding"),
aes(x = (start+end)/2, y = -.3, label = str_remove(gene_name, "MT-")), inherit.aes = F, angle = 90, size = 7, fontface="italic") +
geom_rect(data = filter(rect_positions, !gene_biotype == "protein_coding"),
aes(xmin = start, xmax = end, ymin = -.175, ymax = -.125),
fill = "red", color = "black", inherit.aes = F) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1.0), limits = c(-0.35,1)) +
scale_x_continuous(limits = c(0, 16569), breaks = (c(0, 5000, 10000, 15000, 16569))) +
scale_color_manual(values = c("polymorphism" = "limegreen", "no polymorphism" = "lightcoral")) +
#scale_shape_manual(values = c("indel" = 4, "SNV" = 20)) +
ylab("Allele Frequency\n") +
xlab("\nnt position in mt Genome") +
ggrepel::geom_text_repel(data = vcf_file %>%
dplyr::filter(!Status == "polymorphism", VariantLevel >= 0.05, !gene_name == "non-coding") %>%
distinct(), aes(label = gene_name), size = 6, fontface="italic") +
if(vcf_file %>% pull(ID) %>% unique() %>% length() > 1){facet_wrap(~ID, ncol=1)}
nr_samples <- vcf_file %>%
pull(ID) %>%
unique() %>%
length()
ggsave('Results/mitomap.png',
height = if(nr_samples > 1) {
if(nr_samples>5) {
45
} else{nr_samples*9}
} else{9}, width = 19)
# Raw sequence review----
processQCFastq <- function(rowname) {
row <- which(row.names(studyDesign)==rowname)
file <- as.character(studyDesign[row, "filename"])
fastq <- readFastq(file, widthIds=FALSE)
c(
reads = formatC(length(fastq), big.mark=","),
mbs = formatC(round(sum(width(fastq)) / 1000 / 1000, digits=1), big.mark=","),
min = min(width(fastq)),
max = max(width(fastq)),
mean = round(mean(width(fastq)), digits=1),
median = round(median(width(fastq)), digits=0),
qval = round(mean(alphabetScore(fastq) / width(fastq)), digits=1),
gc = round(mean(letterFrequency(sread(fastq), "GC")  / width(fastq)) * 100, digits=1)
)
}
data <- lapply(row.names(studyDesign), processQCFastq)
qcData <- data.frame(data)
colnames(qcData) <- row.names(studyDesign)
qcData$INFO <-row.names(qcData)
qcData <- qcData[,c(ncol(qcData),1:(ncol(qcData)-1))]
df <- dplyr::tibble(qcData)
df_t <- gt::gt(df)
gt::gtsave(df_t, "Results/QC/sample_summary.html")
flagstatTargets <- file.path("Analysis", "flagstat",
paste(tools::file_path_sans_ext(basename(as.character(studyDesign$filename)), compression=TRUE),".txt",sep=""))
loadFlagstat <- function(file) {
x <- read.table(file, header=FALSE, sep=" ", fill=NA)
x[1:8,1]
}
flagstatRes <- data.frame(matrix(unlist(lapply(flagstatTargets, loadFlagstat)), ncol=length(flagstatTargets)), stringsAsFactors = FALSE)
colnames(flagstatRes) <- rownames(studyDesign)
resultDir1 <- file.path("Analysis", "Results", "QC")
dir.create(resultDir1, showWarnings = FALSE, recursive = TRUE)
